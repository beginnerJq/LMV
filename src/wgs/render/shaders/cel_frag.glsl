module.exports = "\n#include <depth_texture>\nuniform sampler2D tDiffuse;\nuniform sampler2D tID;\nuniform vec2 resolution;\nuniform float cameraNear;\nuniform float cameraFar;\nuniform sampler2D tFill;\nuniform sampler2D tPaper;\nuniform int style;\nuniform int idEdges;\nuniform int normalEdges;\nuniform int depthEdges;\nuniform float brightness;\nuniform float contrast;\nuniform int grayscale;\nuniform int preserveColor;\nuniform int outlineNoise;\nuniform float levels;\nuniform float repeats;\nuniform float rotation;\nuniform float outlineRadius;\nuniform sampler2D tGraphite1;\nuniform sampler2D tGraphite2;\nuniform sampler2D tGraphite3;\nuniform sampler2D tGraphite4;\nuniform sampler2D tGraphite5;\nuniform sampler2D tGraphite6;\nuniform sampler2D tGraphite7;\nuniform sampler2D tGraphite8;\nvarying vec2 vUv;\nvec4 recoverNZ(vec4 nrmz) {\n    float z = sqrt(1.0 - dot(nrmz.xy, nrmz.xy));\n    nrmz.w = -(nrmz.z + cameraNear) / (cameraFar - cameraNear);\n    nrmz.z = z;\n    return nrmz;\n}\n#include <tonemap>\n#include <hsv>\nvec3 quantize(vec3 c) {\n    float L = max(c.r, max(c.g, c.b));\n    c *= floor(L * (levels-1.0) + 0.5) / (L * (levels-1.0));\n    return c;\n}\nvec3 quantizeRGB(vec3 c) {\n    c *= c;\n    c *= floor(c * levels * 0.9999) / (levels-1.0);\n    return sqrt(c);\n}\nvec3 clampHue(vec3 c, float hues, float sats, float vals) {\n    vec3 hsv = rgb2hsv(c);\n    hsv.x = floor(hsv.x * hues + 0.5) / hues;\n    hsv.y = floor(hsv.y * sats + 0.5) / sats;\n    hsv.z = floor(hsv.z * vals + 0.5) / vals;\n    vec3 col = hsv2rgb(hsv);\n    return col;\n}\nvec3 reconstructCSFaceNormal(vec3 C) {\n    return normalize(cross(dFdy(C), dFdx(C)));\n}\nvec3 getPosition(ivec2 ssP, float depth) {\n    vec3 P;\n    P = reconstructCSPosition(vec2(ssP) + vec2(0.5), depth);\n    return P;\n}\nint isObjectEdge() {\n    vec2 uv = vUv;\n    if (outlineNoise == 1) {\n        vec4 noise = texture2D(tGraphite7, vUv);\n        uv = vUv + 0.02 * (noise.xy - vec2(0.25));\n    }\n    vec4 MM = texture2D(tID, uv);\n    vec4 LL = texture2D(tID, uv + vec2(-outlineRadius, -outlineRadius) * resolution);\n    if (MM != LL) return 1;\n    vec4 LM = texture2D(tID, uv + vec2( 0.0, -outlineRadius) * resolution);\n    if (MM != LM) return 1;\n    vec4 LR = texture2D(tID, uv + vec2( outlineRadius, -outlineRadius) * resolution);\n    if (MM != LR) return 1;\n    vec4 ML = texture2D(tID, uv + vec2(-outlineRadius,  0.0) * resolution);\n    if (MM != ML) return 1;\n    vec4 MR = texture2D(tID, uv + vec2( outlineRadius,  0.0) * resolution);\n    if (MM != MR) return 1;\n    vec4 UL = texture2D(tID, uv + vec2(-outlineRadius,  outlineRadius) * resolution);\n    if (MM != UL) return 1;\n    vec4 UM = texture2D(tID, uv + vec2( 0.0,  outlineRadius) * resolution);\n    if (MM != UM) return 1;\n    vec4 UR = texture2D(tID, uv + vec2( outlineRadius,  outlineRadius) * resolution);\n    if (MM != UR) return 1;\n    return (MM.x + MM.y + MM.z + MM.w) >= 4.0 ? 0 : -1;\n}\nfloat normalDiff(vec3 n1, vec3 n2) {\n    float d = dot(n1.xyz, n2.xyz);\n    return acos(clamp(d, -1.0, 1.0));\n}\nint isNormalDepthEdge() {\n    ivec2 ssC = ivec2(gl_FragCoord.xy);\n    vec2 uv = vUv;\n    if (outlineNoise == 1) {\n        vec4 noise = texture2D(tGraphite7, vUv);\n        uv = vUv + 0.02 * (noise.xy - vec2(0.25));\n    }\n    vec4 MM = texture2D(tDepth, uv);\n    vec4 LL = texture2D(tDepth, uv + vec2(-outlineRadius, -outlineRadius) * resolution);\n    vec4 LM = texture2D(tDepth, uv + vec2( 0.0, -outlineRadius) * resolution);\n    vec4 LR = texture2D(tDepth, uv + vec2( outlineRadius, -outlineRadius) * resolution);\n \n    vec4 ML = texture2D(tDepth, uv + vec2(-outlineRadius,  0.0) * resolution);\n    vec4 MR = texture2D(tDepth, uv + vec2( outlineRadius,  0.0) * resolution);\n    vec4 UL = texture2D(tDepth, uv + vec2(-outlineRadius, outlineRadius) * resolution);\n    vec4 UM = texture2D(tDepth, uv + vec2( 0.0,  outlineRadius) * resolution);\n    vec4 UR = texture2D(tDepth, uv + vec2( outlineRadius,  outlineRadius) * resolution);\n    LL = recoverNZ(LL);\n    LM = recoverNZ(LM);\n    LR = recoverNZ(LR);\n    ML = recoverNZ(ML);\n    MM = recoverNZ(MM);\n    MR = recoverNZ(MR);\n    UL = recoverNZ(UL);\n    UM = recoverNZ(UM);\n    UR = recoverNZ(UR);\n    float dd = 0.0;\n    if ( depthEdges == 1 ) {\n        float G = (abs(UL.w - MM.w) + 2.0 * abs(UM.w - MM.w) + abs(UR.w - MM.w) + 2.0 * abs(ML.w - MM.w) + 2.0 * abs(MR.w - MM.w) + abs(LL.w - MM.w) + 2.0 * abs(LM.w - MM.w) + abs(LR.w - MM.w));\n        dd = abs(dFdx(G)) + abs(dFdy(G));\n    }\n    float Gn = 0.0;\n    if ( normalEdges == 1 ) {\n        float pLL = normalDiff(LL.xyz, MM.xyz);\n        float pLM = normalDiff(LM.xyz, MM.xyz);\n        float pLR = normalDiff(LR.xyz, MM.xyz);\n        float pML = normalDiff(ML.xyz, MM.xyz);\n        float pMM = normalDiff(MM.xyz, MM.xyz);\n        float pMR = normalDiff(MR.xyz, MM.xyz);\n        float pUL = normalDiff(UL.xyz, MM.xyz);\n        float pUM = normalDiff(UM.xyz, MM.xyz);\n        float pUR = normalDiff(UR.xyz, MM.xyz);\n        Gn = (abs(pUL - pMM) + 2.0 * abs(pUM - pMM) + abs(pUR - pMM) + 2.0 * abs(pML - pMM) + 2.0 * abs(pMR - pMM) + abs(pLL - pMM) + 2.0 * abs(pLM - pMM) + abs(pLR - pMM));\n    }\n    \n    return (dd > 0.004 || Gn > 2.0) ? 1 : 0;\n}\nvec3 computeGraphite( vec3 color, vec2 loc ) {\n    float lum = 0.299 * color.r + 0.587 * color.g + 0.114 * color.b;\n    float offset;\n    vec3 col1, col2;\n    if ( lum > 6.0/7.0 ) {\n        col1 = texture2D(tGraphite1, loc ).xyz;\n        col2 = texture2D(tGraphite2, loc ).xyz;\n        offset = 6.0/7.0;\n    } else if ( lum > 5.0/7.0 ) {\n        col1 = texture2D(tGraphite2, loc ).xyz;\n        col2 = texture2D(tGraphite3, loc ).xyz;\n        offset = 5.0/7.0;\n    } else if ( lum > 4.0/7.0 ) {\n        col1 = texture2D(tGraphite3, loc ).xyz;\n        col2 = texture2D(tGraphite4, loc ).xyz;\n        offset = 4.0/7.0;\n    } else if ( lum > 3.0/7.0 ) {\n        col1 = texture2D(tGraphite4, loc ).xyz;\n        col2 = texture2D(tGraphite5, loc ).xyz;\n        offset = 3.0/7.0;\n    } else if ( lum > 2.0/7.0 ) {\n        col1 = texture2D(tGraphite5, loc ).xyz;\n        col2 = texture2D(tGraphite6, loc ).xyz;\n        offset = 2.0/7.0;\n    } else if ( lum > 1.0/7.0 ) {\n        col1 = texture2D(tGraphite6, loc ).xyz;\n        col2 = texture2D(tGraphite7, loc ).xyz;\n        offset = 1.0/7.0;\n    } else {\n        col1 = texture2D(tGraphite7, loc ).xyz;\n        col2 = texture2D(tGraphite8, loc ).xyz;\n        offset = 0.0;\n    }\n    if ( col1.r == 0.0 && col2.r == 0.0 ) {\n        return vec3(lum,lum,lum);\n    }\n    float t = (lum-offset)*7.0;\n    return (col1 * t + col2 * (1.0 - t));\n}\nvec3 colorWithAdjustments() {\n    vec3 sceneRGB = texture2D(tDiffuse, vUv).xyz;\n    if ( brightness != 0.0 || contrast != 0.0) {\n        if ( brightness < 0.0 )\n        {\n            sceneRGB = sceneRGB * (1.0 + brightness);\n        }\n        else\n        {\n            sceneRGB = sceneRGB + ((1.0 - sceneRGB) * brightness);\n        }\n        float slant = tan(( clamp(contrast,-1.0,1.0) + 1.0) * 3.141592/4.001);\n        sceneRGB = (sceneRGB - 0.5) * slant + 0.5;\n        if ( preserveColor == 1 )\n        {\n            float maxval = max( sceneRGB.r, sceneRGB.g );\n            maxval = max( maxval, sceneRGB.b );\n            if ( maxval > 1.0 )\n            {\n                sceneRGB /= maxval;\n            }\n        }\n        sceneRGB = clamp(sceneRGB,0.0,1.0);\n    }\n    if ( grayscale == 1 ) {\n        sceneRGB.rgb = vec3(luminance_post(sceneRGB.rgb));\n    }\n    return sceneRGB;\n}\nvoid main() {\n    int foundEdge = 0;\n    foundEdge = ( idEdges == 1 && isObjectEdge() == 1 ) ? 1 : 0;\n    if ( foundEdge == 0 && (normalEdges == 1 || depthEdges == 1) ) {\n        foundEdge = isNormalDepthEdge();\n    }\n    vec2 loc = vec2((vUv.x-0.5)*(resolution.y/resolution.x),vUv.y-0.5)*repeats;\n    if ( style > 2 && rotation != 0.0 ) {\n        float rot = 3.14159*rotation;\n        float sinr = sin(rot);\n        float cosr = cos(rot);\n        loc = vec2(loc.x*cosr + -loc.y*sinr, loc.x*sinr + loc.y*cosr);\n    }\n    loc += vec2(0.5,0.5);\n    vec3 color;\n    if ( style == 2 ) {\n        if ( foundEdge == 1 ) {\n            gl_FragColor = vec4(0.0,0.0,0.0,1.0);\n        } else {\n            gl_FragColor = vec4(quantize(colorWithAdjustments()),1.0);\n        }\n    } else if ( style == 3 ) {\n        color = colorWithAdjustments();\n        vec3 graphColor = computeGraphite( color, loc );\n        if ( foundEdge == 1 ) {\n            gl_FragColor = vec4(0.16,0.16,0.16,1.0) + vec4(0.18 * graphColor,0.0);\n        } else {\n            gl_FragColor = vec4(graphColor,1.0);\n        }\n        return;\n    } else if ( style == 4 ) {\n        float fill = texture2D(tFill, loc ).r;\n        float paperStrength = 0.3;\n        vec3 paper = texture2D(tPaper, loc ).rgb;\n        paper = paperStrength * paper + (1.0-paperStrength)*vec3(1.0,1.0,1.0);\n        if ( foundEdge == 1 ) {\n            gl_FragColor = 0.75 * vec4(paper * fill, 1.0);\n        } else {\n            fill = pow(fill,1.6);\n            gl_FragColor = vec4(colorWithAdjustments() * (1.0 - fill) + paper * fill, 1.0);\n        }\n    } else {\n        if ( foundEdge == 1 ) {\n            gl_FragColor = vec4(0.0,0.0,0.0,1.0);\n        } else {\n            gl_FragColor = vec4(colorWithAdjustments(),1.0);\n        }\n        return;        \n    }\n}\n";