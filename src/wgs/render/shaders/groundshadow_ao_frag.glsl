module.exports = "#define NUM_SAMPLES 29.0\n#define NUM_SPIRAL_TURNS 7.0\nuniform sampler2D tDepth;\nuniform vec3 worldSize;\nvarying vec2 vUv;\n#ifdef PRESET_2\n#define SAMPLE_RADIUS 0.3\n#define AO_GAMMA 1.0\n#define AO_INTENSITY 1.0\n#else\n#define SAMPLE_RADIUS 0.2\n#define AO_GAMMA 3.0\n#define AO_INTENSITY 0.8\n#endif\n#include <pack_depth>\n#define PI 3.14159265358979\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\nfloat getRandomAngle(vec2 pos) {\n    return rand(pos) * (2.0 * PI);\n}\nvec2 tapLocation(float sampleNumber, float spinAngle, out float ssR){\n    float alpha = float(sampleNumber + 0.5) * (1.0 / NUM_SAMPLES);\n    float angle = alpha * (NUM_SPIRAL_TURNS * PI * 2.0) + spinAngle;\n    ssR = alpha;\n    return vec2(cos(angle), sin(angle));\n}\nvec2 sampleAO(vec2 unitDirection, float radius) {\n    vec2 sampleOffset = unitDirection * radius;\n    float idepth = unpackDepth(texture2D(tDepth, vUv + sampleOffset));\n    float depth = 1.0 - idepth;\n    if (depth < 1e-6) {\n        if (radius == 0.0)\n            return vec2(1.0, 1.0);\n        else\n            return vec2(0.0, 1.0);\n    }\n    vec3 dir = vec3(sampleOffset.x, depth, sampleOffset.y) * worldSize;\n    float distance2 = dot(dir,dir);\n    float idistance = 1.0 / sqrt(distance2);\n    vec3 ndir = dir * idistance;\n#ifdef PRESET_2\n    float importance = ndir.y * idistance;\n#else\n    float importance = ndir.y / distance2;\n#endif\n    vec2 ret;\n    ret.x = (idepth == 0.0) ? 0.0 : importance;\n    ret.y = importance;\n    return ret;\n}\nvoid main() {\n    vec2 sum = vec2(0.0);\n    float angle = getRandomAngle(vUv);\n    for (float i = 0.0; i<NUM_SAMPLES; i+= 1.0) {\n        float ssR;\n        vec2 uv = tapLocation(i, angle, ssR);\n        sum += sampleAO(uv, ssR * SAMPLE_RADIUS);\n    }\n    float ao = sum.x / sum.y;\n    gl_FragColor = packDepth(AO_INTENSITY * clamp(pow(ao, AO_GAMMA), 0.0, 0.9999));\n}\n";