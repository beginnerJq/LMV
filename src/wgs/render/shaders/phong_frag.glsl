module.exports = "uniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\nuniform vec3 emissive;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\n\r\n#include <env_sample>\r\n\r\n#ifdef USE_COLOR\r\nvarying vec3 vColor;\r\n#endif\r\n\r\n#ifdef GAMMA_INPUT\r\nvec3 InputToLinear(vec3 c) {\r\n    return c * c;\r\n}\r\nfloat InputToLinear(float c) {\r\n    return c * c;\r\n}\r\n#else\r\nvec3 InputToLinear(vec3 c) {\r\n    return c;\r\n}\r\nfloat InputToLinear(float c) {\r\n    return c;\r\n}\r\n#endif\r\n\r\n#if defined( USE_MAP ) || defined( USE_SPECULARMAP )\r\nvarying vec2 vUv;\r\n#endif\r\n\r\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\r\nvarying vec2 vUvBump;\r\n#endif\r\n\r\n#if defined( USE_ALPHAMAP )\r\nvarying vec2 vUvAlpha;\r\n#endif\r\n\r\n#ifdef USE_MAP\r\nuniform sampler2D map;\r\n#endif\r\n\r\n#if TONEMAP_OUTPUT > 0\r\nuniform float exposureBias;\r\n#include <tonemap>\r\n#endif\r\n\r\n#if defined(IRR_RGBM) || defined(ENV_RGBM) || defined(ENV_GAMMA) || defined(IRR_GAMMA)\r\nuniform float envMapExposure;\r\n#endif\r\n\r\n#ifdef USE_FOG\r\nuniform vec3 fogColor;\r\nuniform float fogNear;\r\nuniform float fogFar;\r\n#endif\r\n#include <id_decl_frag>\r\n#include <theming_decl_frag>\r\n#include <shadowmap_decl_frag>\r\n\r\n#ifdef USE_ENVMAP\r\n\r\nuniform float reflMipIndex;\r\n\r\nuniform float reflectivity;\r\nuniform samplerCube envMap;\r\n\r\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\r\n\r\nuniform float refractionRatio;\r\n\r\n#endif\r\n\r\nvec3 sampleReflection(vec3 dir, float mipIndex) {\r\n\r\n    vec3 adjDir = adjustLookupVector(dir);\r\n\r\n#ifdef ENV_GAMMA\r\n\r\n#ifdef HAVE_TEXTURE_LOD\r\n    vec4 envTexColor = textureCubeLodEXT( envMap, adjDir, mipIndex );\r\n#else\r\n\r\n\r\n    vec4 envTexColor = textureCube( envMap, adjDir, mipIndex );\r\n#endif\r\n\r\n    return GammaDecode(envTexColor, envMapExposure);\r\n\r\n#elif defined(ENV_RGBM)\r\n\r\n#ifdef HAVE_TEXTURE_LOD\r\n    vec4 envTexColor = textureCubeLodEXT( envMap, adjDir, mipIndex );\r\n#else\r\n\r\n\r\n    vec4 envTexColor = textureCube( envMap, adjDir, mipIndex );\r\n#endif\r\n\r\n    return RGBMDecode(envTexColor, envMapExposure);\r\n\r\n#else\r\n\r\n\r\n\r\n    vec4 envTexColor = textureCube( envMap, adjDir );\r\n    vec3 cubeColor = envTexColor.xyz;\r\n\r\n#ifdef GAMMA_INPUT\r\n    cubeColor *= cubeColor;\r\n#endif\r\n\r\n    return cubeColor;\r\n\r\n#endif\r\n\r\n}\r\n\r\n#endif\r\n\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\r\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_SPOT_LIGHTS > 0\r\n\r\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\r\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\r\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\r\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\r\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\r\n\r\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\r\n\r\n#endif\r\n\r\n#ifdef USE_IRRADIANCEMAP\r\nuniform samplerCube irradianceMap;\r\n#endif\r\n\r\n#if MAX_SPOT_LIGHTS > 0 || NUM_CUTPLANES > 0\r\nvarying highp vec3 vWorldPosition;\r\n#endif\r\n\r\nvarying highp vec3 vViewPosition;\r\n#ifndef FLAT_SHADED\r\nvarying highp vec3 vNormal;\r\n#endif\r\n\r\n#ifdef USE_BUMPMAP\r\n\r\nuniform sampler2D bumpMap;\r\nuniform float bumpScale;\r\n\r\n\r\n\r\n\r\n\r\n\r\nvec2 dHdxy_fwd() {\r\n\r\n    vec2 dSTdx = dFdx( vUvBump );\r\n    vec2 dSTdy = dFdy( vUvBump );\r\n\r\n    float Hll = bumpScale * GET_BUMPMAP(vUvBump).x;\r\n    float dBx = bumpScale * GET_BUMPMAP(vUvBump + dSTdx).x - Hll;\r\n    float dBy = bumpScale * GET_BUMPMAP(vUvBump + dSTdy).x - Hll;\r\n\r\n    return vec2( dBx, dBy );\r\n\r\n}\r\n\r\nvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\r\n\r\n    vec3 vSigmaX = dFdx( surf_pos );\r\n    vec3 vSigmaY = dFdy( surf_pos );\r\n    vec3 vN = surf_norm;\r\n\r\n    vec3 R1 = cross( vSigmaY, vN );\r\n    vec3 R2 = cross( vN, vSigmaX );\r\n\r\n    float fDet = dot( vSigmaX, R1 );\r\n\r\n    vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\r\n    return normalize( abs( fDet ) * surf_norm - vGrad );\r\n\r\n}\r\n\r\n#endif\r\n\r\n\r\n#ifdef USE_NORMALMAP\r\n\r\nuniform sampler2D normalMap;\r\nuniform vec2 normalScale;\r\n\r\n\r\n\r\n\r\nvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\r\n\r\n    vec3 q0 = dFdx( eye_pos.xyz );\r\n    vec3 q1 = dFdy( eye_pos.xyz );\r\n    vec2 st0 = dFdx( vUvBump.st );\r\n    vec2 st1 = dFdy( vUvBump.st );\r\n\r\n    vec3 S = normalize(  q0 * st1.t - q1 * st0.t );\r\n    vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\r\n    vec3 N = normalize( surf_norm );\r\n\r\n    vec3 mapN = GET_NORMALMAP(vUvBump).xyz * 2.0 - 1.0;\r\n    mapN.xy = normalScale * mapN.xy;\r\n    mat3 tsn = mat3( S, T, N );\r\n    return normalize( tsn * mapN );\r\n\r\n}\r\n\r\n#endif\r\n\r\n\r\n#ifdef USE_SPECULARMAP\r\nuniform sampler2D specularMap;\r\n#endif\r\n\r\n#ifdef USE_ALPHAMAP\r\nuniform sampler2D alphaMap;\r\n#endif\r\n\r\n#include <hatch_pattern>\r\n\r\nvec3 Schlick_v3(vec3 v, float cosHV) {\r\n    float facing = max(1.0 - cosHV, 0.0);\r\n    return v + (1.0 - v) * pow(facing, 5.0);\r\n}\r\n\r\nfloat Schlick_f(float v, float cosHV) {\r\n    float facing = max(1.0 - cosHV, 0.0);\r\n    return v + ( 1.0 - v ) * pow(facing, 5.0);\r\n}\r\n\r\n#include <cutplanes>\r\n\r\nvoid main() {\r\n\r\n#if NUM_CUTPLANES > 0\r\n    checkCutPlanes(vWorldPosition);\r\n#endif\r\n\r\n    gl_FragColor = vec4( vec3 ( 1.0 ), opacity );\r\n\r\n#ifdef USE_MAP\r\n    vec4 texelColor = GET_MAP(vUv);\r\n#ifdef MAP_INVERT\r\n    texelColor.xyz = 1.0-texelColor.xyz;\r\n#endif\r\n#ifdef GAMMA_INPUT\r\n    texelColor.xyz *= texelColor.xyz;\r\n#endif\r\n    gl_FragColor = gl_FragColor * texelColor;\r\n#endif\r\n\r\n#ifdef USE_ALPHAMAP\r\n    vec4 texelAlpha = GET_ALPHAMAP(vUvAlpha);\r\n    gl_FragColor.a *= texelAlpha.r;\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n    if ( gl_FragColor.a < ALPHATEST ) discard;\r\n#endif\r\n\r\n    float specularStrength;\r\n\r\n#ifdef USE_SPECULARMAP\r\n    vec4 texelSpecular = GET_SPECULARMAP(vUv);\r\n    specularStrength = texelSpecular.r;\r\n#else\r\n    specularStrength = 1.0;\r\n#endif\r\n\r\n#ifndef FLAT_SHADED\r\n    vec3 normal = normalize( vNormal );\r\n#ifdef DOUBLE_SIDED\r\n\r\n#endif\r\n#else\r\n    vec3 fdx = dFdx( vViewPosition );\r\n    vec3 fdy = dFdy( vViewPosition );\r\n    vec3 normal = normalize( cross( fdx, fdy ) );\r\n#endif\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    vec3 viewDirection;\r\n    if (projectionMatrix[3][3] == 0.0) {\r\n        viewDirection = normalize( vViewPosition );\r\n    } else {\r\n        viewDirection = vec3(0.0, 0.0, 1.0);\r\n    }\r\n    normal = faceforward(normal, -viewDirection, normal);\r\n\r\n    vec3 geomNormal = normal;\r\n\r\n#ifdef USE_NORMALMAP\r\n    normal = perturbNormal2Arb( -vViewPosition, normal );\r\n#elif defined( USE_BUMPMAP )\r\n    normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n#endif\r\n\r\n    vec3 totalDiffuse = vec3( 0.0 );\r\n    vec3 totalSpecular = vec3( 0.0 );\r\n\r\n\r\n\r\n    float shininessB = shininess * 4.0;\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n    vec3 pointDiffuse  = vec3( 0.0 );\r\n    vec3 pointSpecular = vec3( 0.0 );\r\n\r\n    for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n        vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n        vec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n        float lDistance = 1.0;\r\n        if ( pointLightDistance[ i ] > 0.0 )\r\n            lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n        lVector = normalize( lVector );\r\n\r\n\r\n\r\n        float dotProduct = dot( normal, lVector );\r\n\r\n        float pointDiffuseWeight = max( dotProduct, 0.0 );\r\n\r\n\r\n        pointDiffuse  += InputToLinear(diffuse) * InputToLinear(pointLightColor[ i ]) * pointDiffuseWeight * lDistance;\r\n\r\n\r\n\r\n        vec3 pointHalfVector = normalize( lVector + viewDirection );\r\n        float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\r\n        float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininessB ), 0.0 );\r\n        float specularNormalization = shininessB * 0.125 + 0.25;\r\n        vec3 schlick = Schlick_v3(InputToLinear(specular), dot( lVector, pointHalfVector ) );\r\n        pointSpecular += schlick * InputToLinear(pointLightColor[ i ]) * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization ;\r\n\r\n    }\r\n\r\n    totalDiffuse += pointDiffuse;\r\n    totalSpecular += pointSpecular;\r\n\r\n#endif\r\n\r\n#if MAX_SPOT_LIGHTS > 0\r\n\r\n    vec3 spotDiffuse  = vec3( 0.0 );\r\n    vec3 spotSpecular = vec3( 0.0 );\r\n\r\n    for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\r\n\r\n        vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\r\n        vec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n        float lDistance = 1.0;\r\n        if ( spotLightDistance[ i ] > 0.0 )\r\n            lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\r\n\r\n        lVector = normalize( lVector );\r\n\r\n        float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\r\n\r\n        if ( spotEffect > spotLightAngleCos[ i ] ) {\r\n\r\n            spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\r\n\r\n\r\n\r\n            float dotProduct = dot( normal, lVector );\r\n\r\n            float spotDiffuseWeight = max( dotProduct, 0.0 );\r\n\r\n            spotDiffuse += InputToLinear(diffuse) * InputToLinear(spotLightColor[ i ]) * spotDiffuseWeight * lDistance * spotEffect;\r\n\r\n\r\n\r\n            vec3 spotHalfVector = normalize( lVector + viewDirection );\r\n            float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\r\n            float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininessB ), 0.0 );\r\n\r\n            float specularNormalization = shininessB * 0.125 + 0.25;\r\n            vec3 schlick = Schlick_v3(InputToLinear(specular), dot( lVector, spotHalfVector ) );\r\n            spotSpecular += schlick * InputToLinear(spotLightColor[ i ]) * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\r\n        }\r\n\r\n    }\r\n\r\n    totalDiffuse += spotDiffuse;\r\n    totalSpecular += spotSpecular;\r\n\r\n#endif\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n    vec3 dirDiffuse  = vec3( 0.0 );\r\n    vec3 dirSpecular = vec3( 0.0 );\r\n\r\n    for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\r\n\r\n        vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n        vec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\r\n\r\n        float dotProduct = dot( normal, dirVector );\r\n\r\n        float dirDiffuseWeight = max( dotProduct, 0.0 );\r\n\r\n        dirDiffuse  += InputToLinear(diffuse) * InputToLinear(directionalLightColor[ i ]) * dirDiffuseWeight;\r\n\r\n\r\n\r\n        vec3 dirHalfVector = normalize( dirVector + viewDirection );\r\n        float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n        float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininessB ), 0.0 );\r\n\r\n        float specularNormalization = shininessB * 0.125 + 0.25;\r\n        vec3 schlick = Schlick_v3(InputToLinear(specular), dot( dirVector, dirHalfVector ));\r\n\r\n        dirSpecular += schlick * InputToLinear(directionalLightColor[ i ]) * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\r\n\r\n    }\r\n\r\n    totalDiffuse += dirDiffuse;\r\n    totalSpecular += dirSpecular;\r\n\r\n#endif\r\n\r\n\r\n\r\n#ifdef USE_IRRADIANCEMAP\r\n    vec3 worldNormal = mat3(viewMatrixInverse) * normal;\r\n    vec3 indirectDiffuse = sampleIrradianceMap(worldNormal, irradianceMap, envMapExposure);\r\n\r\n    indirectDiffuse = applyEnvShadow(indirectDiffuse, worldNormal);\r\n\r\n    totalDiffuse += InputToLinear(diffuse) * indirectDiffuse;\r\n#endif\r\n\r\n\r\n#ifdef METAL\r\n    gl_FragColor.xyz = gl_FragColor.xyz * ( InputToLinear(emissive) + totalDiffuse + ambientLightColor * InputToLinear(diffuse) + totalSpecular );\r\n#else\r\n    gl_FragColor.xyz = gl_FragColor.xyz * ( InputToLinear(emissive) + totalDiffuse + ambientLightColor * InputToLinear(diffuse) ) + totalSpecular;\r\n#endif\r\n\r\n\r\n\r\n#ifdef USE_COLOR\r\n    gl_FragColor = gl_FragColor * vec4( vColor, 1.0 );\r\n#endif\r\n\r\n\r\n#if defined(USE_ENVMAP)\r\n\r\n    vec3 reflectVec;\r\n\r\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\r\n\r\n#ifdef ENVMAP_MODE_REFLECTION\r\n    reflectVec = reflect( -viewDirection, normal );\r\n#else \r\n    reflectVec = refract( -viewDirection, normal, refractionRatio );\r\n#endif\r\n\r\n#else\r\n\r\n    reflectVec = reflect( -viewDirection, normal );\r\n\r\n#endif\r\n\r\n    reflectVec = mat3(viewMatrixInverse) * reflectVec;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    float reflectScale = 1.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    vec3 cubeColor = sampleReflection(reflectVec, reflMipIndex);\r\n\r\n    cubeColor *= reflectScale;\r\n\r\n    float facing = dot( viewDirection, normal );\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    if (facing < -1e-2  || reflectivity == 0.0)\r\n        facing = 1.0;\r\n    else\r\n        facing = max(1e-6, facing);\r\n\r\n#ifdef USE_BUMPMAP\r\n\r\n\r\n\r\n    facing = min(1.0, facing + bumpScale * 7.0);\r\n\r\n#endif\r\n\r\n    vec3 schlickRefl;\r\n\r\n#ifdef METAL\r\n\r\n\r\n    schlickRefl = InputToLinear(specular);\r\n\r\n#else\r\n\r\n\r\n    schlickRefl = Schlick_v3(InputToLinear(specular), facing);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    gl_FragColor.a = mix(gl_FragColor.a, Schlick_f(gl_FragColor.a, facing), reflectivity);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    float invSchlick = pow(1.0 - facing * 0.5, 5.0);\r\n\r\n\r\n    float norm_factor = (28.0 / 23.0) * (1.0 - invSchlick) * (1.0 - invSchlick);\r\n\r\n    gl_FragColor.xyz *= norm_factor * (1.0 - InputToLinear(specular));\r\n\r\n#endif\r\n\r\n\r\n    gl_FragColor.xyz += cubeColor.xyz * specularStrength * schlickRefl.xyz;\r\n\r\n#ifdef CLEARCOAT\r\n\r\n    vec3 reflectVecClearcoat = reflect( -viewDirection, geomNormal );\r\n    reflectVecClearcoat = mat3(viewMatrixInverse) * reflectVecClearcoat;\r\n\r\n    vec3 cubeColorClearcoat = sampleReflection(reflectVecClearcoat, 0.0);\r\n\r\n\r\n    float schlickClearcoat = Schlick_f(InputToLinear(reflectivity), facing);\r\n\r\n\r\n\r\n    gl_FragColor.xyz = mix(gl_FragColor.xyz, cubeColorClearcoat * schlickClearcoat, 0.5);\r\n\r\n#endif\r\n\r\n\r\n\r\n\r\n#endif\r\n\r\n#if TONEMAP_OUTPUT == 1\r\n    gl_FragColor.xyz = toneMapCanonOGS_WithGamma_WithColorPerserving(exposureBias * gl_FragColor.xyz);\r\n#elif TONEMAP_OUTPUT == 2\r\n    gl_FragColor.xyz = toneMapCanonFilmic_WithGamma( exposureBias * gl_FragColor.xyz );\r\n#endif\r\n\r\n\r\n\r\n#ifdef USE_FOG\r\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\r\n    float fogFactor = smoothstep( fogNear, fogFar, depth );\r\n    gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\r\n#endif\r\n#include <theming_frag>\r\n#include <final_frag>\r\n\r\n}\r\n";