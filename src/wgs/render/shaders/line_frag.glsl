module.exports = "\r\n\r\n#define LINE\r\n#include <line_decl_common>\r\n#include <id_decl_frag>\r\n\r\nuniform highp float pixelsPerUnit;\r\nuniform highp float aaRange;\r\n\r\nuniform float opacity;\r\nuniform highp float viewportId;\r\nuniform highp float swap;\r\nuniform highp float grayscale;\r\n\r\n#ifdef HAS_RASTER_QUADS\r\nuniform sampler2D tRaster;\r\n#endif\r\n\r\n#ifdef HAS_LINESTYLES\r\nuniform sampler2D tLineStyle;\r\nuniform vec2 vLineStyleTexSize;\r\n#endif\r\n\r\n#ifdef VIEWPORT_CLIPPING\r\nuniform highp vec4 viewportBounds;\r\nvarying highp vec2 vPosition;\r\n#endif\r\n\r\n#ifdef IMAGE_UV_TEXTURE\r\nvarying highp vec2 vuv;\r\nuniform sampler2D tRaster;\r\n#endif\r\n\r\n\r\nfloat curveGaussian(float r, float invWidth) {\r\n    float amt = clamp(r * invWidth, 0.0, 1.0);\r\n\r\n    float exponent = amt * 2.0;\r\n\r\n    return exp(-exponent*exponent);\r\n\r\n\r\n\r\n}\r\n\r\n#ifdef HAS_LINESTYLES\r\nfloat getLinePatternPixel(int i, int j) {\r\n\r\n    return texture2D(tLineStyle, (vec2(i, j) + 0.5) / vLineStyleTexSize).x * 255.0;\r\n}\r\n\r\nfloat getPatternLength(int whichPattern) {\r\n    float p1 = getLinePatternPixel(0, whichPattern);\r\n    float p2 = getLinePatternPixel(1, whichPattern);\r\n    return (p2 * 256.0 + p1);\r\n}\r\n#endif\r\n\r\n\r\nvoid fillLineSegment() {\r\n\r\n    float radius = abs(fsHalfWidth);\r\n    float parametricDistance = fsMultipurpose.x;\r\n    float segmentLength      = fsMultipurpose.y;\r\n    float totalDistance      = fsMultipurpose.z;\r\n\r\n#ifdef LOADING_ANIMATION\r\n    float distFromStart = parametricDistance / segmentLength;\r\n    if (loadingProgress < 1.0 && distFromStart > loadingProgress) {\r\n        discard;\r\n    }\r\n#endif\r\n\r\n\r\n#ifdef HAS_LINESTYLES\r\n    int whichPattern         = int(fsMultipurpose.w);\r\n\r\n    if (whichPattern > 0) {\r\n        const float TEX_TO_UNIT = 1.0 / 96.0;\r\n\r\n        float patternScale;\r\n\r\n\r\n\r\n        if (fsHalfWidth < 0.0) {\r\n            patternScale = LTSCALE;\r\n        } else {\r\n            patternScale = LTSCALE * TEX_TO_UNIT * pixelsPerUnit;\r\n        }\r\n\r\n        float patLen = patternScale * getPatternLength(whichPattern);\r\n        float phase = mod((totalDistance + parametricDistance) * pixelsPerUnit, patLen);\r\n\r\n        bool onPixel = true;\r\n        float radiusPixels = radius * pixelsPerUnit;\r\n\r\n        for (int i=2; i<MAX_LINESTYLE_LENGTH; i+=2) {\r\n\r\n            float on = getLinePatternPixel(i, whichPattern);\r\n            if (on == 1.0) on = 0.0;\r\n            on *= patternScale;\r\n\r\n            onPixel = true;\r\n            phase -= on;\r\n            if (phase < 0.0) {\r\n                break;\r\n            }\r\n            else if (phase <= radiusPixels) {\r\n                onPixel = false;\r\n                break;\r\n            }\r\n\r\n            float off = getLinePatternPixel(i+1, whichPattern);\r\n            if (off <= 1.0) off = 0.0;\r\n            off *= patternScale;\r\n\r\n            onPixel = false;\r\n            phase -= off;\r\n            if (phase < -radiusPixels)\r\n                discard;\r\n            if (phase <= 0.0)\r\n                break;\r\n        }\r\n\r\n\r\n\r\n\r\n        if (!onPixel && (abs(phase) <= radiusPixels)) {\r\n            segmentLength = 0.0;\r\n            parametricDistance = phase / pixelsPerUnit;\r\n        }\r\n    }\r\n#endif\r\n\r\n\r\n\r\n\r\n    float dist;\r\n    float offsetLength2 = dot(fsOffsetDirection, fsOffsetDirection);\r\n\r\n\r\n\r\n\r\n    float ltz = max(0.0, sign(-parametricDistance));\r\n    float gtsl = max(0.0, sign(parametricDistance - segmentLength));\r\n    float d = (ltz + gtsl) * (parametricDistance - gtsl * segmentLength);\r\n    dist = sqrt(max(0.0, offsetLength2 + d*d));\r\n\r\n\r\n\r\n\r\n    float range =  dist - radius;\r\n\r\n    if (range > aaRange) {\r\n        discard;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    gl_FragColor = fsColor;\r\n    gl_FragColor.a *= curveGaussian(range+aaRange, pixelsPerUnit);\r\n}\r\n\r\n#ifdef HAS_CIRCLES\r\nvoid fillCircularArc() {\r\n\r\n    float dist   = length(fsOffsetDirection);\r\n    vec2 angles  = fsMultipurpose.xz;\r\n    float radius = abs(fsMultipurpose.y);\r\n    float range  =  abs(dist - radius);\r\n    range -= fsHalfWidth;\r\n\r\n\r\n\r\n    if (range > aaRange) {\r\n        discard;\r\n    }\r\n\r\n    vec2 direction = fsOffsetDirection;\r\n    float angle = atan(direction.y, direction.x);\r\n\r\n\r\n\r\n\r\n    if (angles.x > angles.y) {\r\n\r\n        if (angle > angles.x && angle < PI) {\r\n                angle -= TAU;\r\n        }\r\n        angles.x -= TAU;\r\n\r\n\r\n\r\n        if (angle < angles.x ) {\r\n            angle += TAU;\r\n        }\r\n    }\r\n    else if (angle < 0.0)\r\n        angle += TAU;\r\n\r\n#ifdef LOADING_ANIMATION\r\n    if ((angle - angles.x) / (angles.y - angles.x) > loadingProgress) {\r\n        discard;\r\n    }\r\n#endif\r\n\r\n\r\n    if (angle > angles.x && angle < angles.y) {\r\n        gl_FragColor = fsColor;\r\n        gl_FragColor.a *= curveGaussian(range+aaRange, pixelsPerUnit);\r\n    }\r\n    else {\r\n        discard;\r\n    }\r\n\r\n}\r\n#endif\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#ifdef HAS_ELLIPTICALS\r\n\r\n\r\n\r\n\r\n\r\n\r\nfloat EllipticalApprox(\r\n        const int iters,\r\n        inout float t0, inout float t1,\r\n        const vec2 y,   out   vec2 x,\r\n        const vec2 e,   const vec2 ey, const vec2 esqr\r\n        ) {\r\n    vec2 r;\r\n    for (int i = 0; i < 10; ++i) {\r\n        if(i >= iters) break;\r\n\r\n        float t = mix(t0, t1, 0.5);\r\n        r = ey / (vec2(t) + esqr);\r\n\r\n        vec2 rsq = r * r;\r\n        float f = rsq.x + rsq.y - 1.0;\r\n\r\n        if(f > 0.0) { t0 = t; } else { t1 = t; }\r\n    }\r\n\r\n    x = e * r;\r\n    return distance(x, y);\r\n}\r\n\r\nfloat DistancePointEllipseSpecial (vec2 e, vec2 y, out vec2 x, float width, float aaRange) {\r\n    float dist;\r\n\r\n\r\n    vec2 esqr = e * e;\r\n    vec2 ey   = e * y;\r\n    float t0 = -esqr[1] + ey[1];\r\n    float t1 = -esqr[1] + length(ey);\r\n\r\n\r\n\r\n    dist = EllipticalApprox(6, t0, t1, y, x, e, ey, esqr);\r\n\r\n\r\n    if (dist > max(2.0 * (width + aaRange), e[0] * 0.05))\r\n        return dist;\r\n\r\n\r\n    dist = EllipticalApprox(6, t0, t1, y, x, e, ey, esqr);\r\n\r\n\r\n\r\n\r\n    float ecc = 1.0 +  0.1 * e[0] / e[1];\r\n\r\n    if (dist > max(ecc * (width + aaRange), e[0] * 0.001))\r\n        return dist;\r\n    if (dist < (width - aaRange) / ecc)\r\n        return dist;\r\n\r\n\r\n\r\n\r\n    dist = EllipticalApprox(10, t0, t1, y, x, e, ey, esqr);\r\n    return dist;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfloat DistancePointEllipse(vec2 e, vec2 y, out vec2 locX, float width, float aaRange) {\r\n    vec2 locE, locY;\r\n\r\n\r\n\r\n\r\n    float diff = sign(e[0] - e[1]);\r\n    vec2 swizzle = vec2(max(diff, 0.0), -min(diff, 0.0));\r\n    locE.x = dot(e, swizzle.xy);\r\n    locE.y = dot(e, swizzle.yx);\r\n    locY.x = dot(y, swizzle.xy);\r\n    locY.y = dot(y, swizzle.yx);\r\n\r\n\r\n    vec2 refl = sign(locY);\r\n    locY *= refl;\r\n\r\n    vec2 x;\r\n    float distance = DistancePointEllipseSpecial(locE, locY, x, width, aaRange);\r\n\r\n    x *= refl;\r\n\r\n    locX.x = dot(x, swizzle.xy);\r\n    locX.y = dot(x, swizzle.yx);\r\n\r\n    return distance;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nvoid fillEllipticalArc() {\r\n    vec2 angles = fsMultipurpose.xz;\r\n    vec2 radii  = abs(fsMultipurpose.yw);\r\n    vec2 dir    = fsOffsetDirection;\r\n\r\n\r\n\r\n\r\n    vec2 pos;\r\n    float range = DistancePointEllipse(radii, dir, pos, fsHalfWidth, aaRange);\r\n    range -= fsHalfWidth;\r\n\r\n    if (range > aaRange)\r\n        discard;\r\n\r\n    float ar = radii[0] / radii[1];\r\n\r\n\r\n\r\n\r\n    float angle = atan(ar * pos.y, pos.x);\r\n\r\n\r\n\r\n\r\n    if (angles.x > angles.y) {\r\n\r\n        if (angle > angles.x && angle < PI) {\r\n            angle -= TAU;\r\n        }\r\n        angles.x -= TAU;\r\n\r\n\r\n\r\n        if (angle < angles.x ) {\r\n            angle += TAU;\r\n        }\r\n    }\r\n    else if (angle < 0.0)\r\n        angle += TAU;\r\n\r\n#ifdef LOADING_ANIMATION\r\n    if ((angle - angles.x) / (angles.y - angles.x) > loadingProgress) {\r\n        discard;\r\n    }\r\n#endif\r\n\r\n\r\n    if (angle > angles.x && angle < angles.y) {\r\n        gl_FragColor = fsColor;\r\n        gl_FragColor.a *= curveGaussian(range+aaRange, pixelsPerUnit);\r\n    }\r\n    else {\r\n        discard;\r\n    }\r\n}\r\n#endif\r\n\r\n#ifdef HAS_RASTER_QUADS\r\n    void fillTexQuad() {\r\n        gl_FragColor = texture2D(tRaster, fsMultipurpose.xy);\r\n        #ifdef LOADING_ANIMATION\r\n            gl_FragColor.a *= loadingProgress;\r\n        #endif\r\n    }\r\n#endif\r\n\r\nvoid fillTriangle() {\r\n#ifdef IMAGE_UV_TEXTURE\r\n    gl_FragColor = texture2D(tRaster, fract(vuv));\r\n#else\r\n    gl_FragColor = fsColor;\r\n#endif\r\n\r\n#ifdef LOADING_ANIMATION\r\n    gl_FragColor.a *= loadingProgress;\r\n#endif\r\n}\r\n\r\n#if NUM_CUTPLANES > 0\r\nvarying highp vec3 vWorldPosition;\r\n#endif\r\n\r\n#ifdef MSDF_TEXTURE_FONT\r\nvarying highp vec2 vuv;\r\nvarying float isMSDFQuards;\r\nuniform sampler2D tRaster;\r\nfloat median(float r, float g, float b) {\r\n  return max(min(r, g), min(max(r, g), b));\r\n}\r\n\r\n#endif\r\n\r\n#include <cutplanes>\r\n\r\nvoid main() {\r\n\r\n\r\n\r\n\r\n\r\n    if (fsColor == vec4(0.0)) {\r\n        discard;\r\n    }\r\n\r\n\r\n#ifdef VIEWPORT_CLIPPING\r\n    if(vPosition.x < viewportBounds.x || vPosition.x > viewportBounds.z || vPosition.y < viewportBounds.y || vPosition.y > viewportBounds.w) {\r\n        discard;\r\n    }\r\n#endif\r\n\r\n#ifdef MSDF_TEXTURE_FONT\r\n    vec4 msdfColor = texture2D(tRaster, vuv);\r\n    float dist = median(msdfColor.r, msdfColor.g, msdfColor.b);\r\n\r\n\r\n    float delta = mix(0.25, 0.5, 1.0 - fwidth(dist));\r\n\r\n    float sigDist = dist - delta;\r\n    float msdfAlpha = clamp(sigDist/fwidth(sigDist) + delta, 0.0, 1.0);\r\n\r\n    msdfAlpha = smoothstep(0., 1., msdfAlpha);\r\n    gl_FragColor.a =  mix(msdfAlpha, 1., 1.-isMSDFQuards);\r\n    if (gl_FragColor.a < 0.0001) discard;\r\n\r\n#endif\r\n\r\n\r\n    if (fsHalfWidth == 0.0) {\r\n#ifdef HAS_RASTER_QUADS\r\n        if (fsMultipurpose.z != 0.0)\r\n            fillTexQuad();\r\n        else\r\n#endif\r\n            fillTriangle();\r\n    }\r\n    else if (fsMultipurpose.y < 0.0) {\r\n#ifdef HAS_CIRCLES\r\n#ifdef HAS_ELLIPTICALS\r\n        if (abs(fsMultipurpose.y) == fsMultipurpose.w)\r\n#endif\r\n            fillCircularArc();\r\n#endif\r\n#ifdef HAS_ELLIPTICALS\r\n#ifdef HAS_CIRCLES\r\n        else\r\n#endif\r\n            fillEllipticalArc();\r\n#endif\r\n    }\r\n    else\r\n        fillLineSegment();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    float writeId = 1.0;\r\n    \r\n    gl_FragColor.a *= opacity;\r\n\r\n    if (gl_FragColor.a == 0.0) {\r\n        discard;\r\n    }\r\n\r\n\r\n\r\n\r\n    if (fsGhosting != 0.0 || \r\n            ((viewportId != 0.0) && (abs(fsVpTC.x * 255.0 + fsVpTC.y) >= 0.5 && abs(fsVpTC.x * 255.0 + fsVpTC.y - viewportId) >= 0.5))) {\r\n\r\n        writeId = 0.0;\r\n\r\n\r\n\r\n        gl_FragColor.a *= ((swap == 1.0) ? 0.21 : 0.1);\r\n    }\r\n\r\n#ifndef SELECTION_RENDERER\r\n\r\n    if (grayscale != 0.0) {\r\n        const vec3 rgb2grey = vec3(0.299, 0.587, 0.114);\r\n        float gray = dot(gl_FragColor.rgb, rgb2grey);\r\n        gl_FragColor.rgb = vec3(gray);\r\n    }\r\n#endif\r\n\r\n#if NUM_CUTPLANES > 0\r\n    checkCutPlanes(vWorldPosition);\r\n#endif\r\n\r\n#ifdef MRT_NORMALS\r\n\r\n    outNormal = vec4(0.0, 0.0, 0.0, 1.0);\r\n#endif\r\n\r\n#ifdef NO_ID_OUTPUT\r\n\r\n    writeId = 0.0;\r\n#endif\r\n\r\n#include <id_frag>\r\n}\r\n";