module.exports = "uniform sampler2D tDiffuse;\nuniform sampler2D tAO;\nuniform int useAO;\nuniform float aoOpacity;\nuniform sampler2D tOverlay;\nuniform int useOverlay;\nuniform int useOverlayAlpha;\nuniform vec2 resolution;\nuniform vec4 objIDv4;\nuniform sampler2D tID;\nuniform vec4 edgeObjIDv4;\n#if defined(USE_MODEL_ID)\n#if defined(HIGHLIGHT_MODEL_ID_COUNT)\nuniform vec2 modelIDsv2v[HIGHLIGHT_MODEL_ID_COUNT];\n#else\nuniform vec2 modelIDv2;\n#endif\nuniform sampler2D tID2;\nuniform vec2 edgeModelIDv2;\n#endif\nuniform float highlightIntensity;\nuniform vec3 selectionColor;\nuniform float highlightFullModel;\nuniform vec3 highlightColor;\n#ifdef IS_2D\nuniform float expand2dSelection;\n#endif\nuniform sampler2D tCrossFadeTex0;\nuniform sampler2D tCrossFadeTex1;\nuniform float     crossFadeOpacity0;\nuniform float     crossFadeOpacity1;\nvarying vec2 vUv;\n#ifdef SPATIAL_FILTER\n#include <depth_texture>\n#endif\n#include <tonemap>\n#ifdef USE_IDBUFFER_SELECTION\nbool isSelection(vec2 vUv, float I, float J) {\n    vec4 idAtPixel = texture2D(tID, vUv+resolution*vec2(I,J));\n    if (idAtPixel.rgb == vec3(0.0))\n        return false;\n#if defined(USE_MODEL_ID)\n    vec4 modelAtPixel = texture2D(tID2, vUv+resolution*vec2(I,J));\n    idAtPixel.a = modelAtPixel.b;\n    vec4 idDelta = abs(idAtPixel.rgba - edgeObjIDv4.rgba);\n    vec2 modelDelta = abs(modelAtPixel.rg - edgeModelIDv2.rg);\n#else\n    vec4 idDelta = vec4(abs(idAtPixel.rgb - edgeObjIDv4.rgb), 0.0);\n    vec2 modelDelta = vec2(0.0, 0.0);\n#endif\n    if (max(max(modelDelta.r, modelDelta.g), max(max(idDelta.r, idDelta.g), max(idDelta.b, idDelta.a))) < 1e-3) {\n        return true;\n    } else {\n        return false;\n    }\n}\n#else\nbool isSelected(vec3 C) {\n    float minS = min(selectionColor.r, min(selectionColor.g, selectionColor.b));\n    float maxS = max(selectionColor.r, max(selectionColor.g, selectionColor.b));\n    float satS = maxS - minS;\n    float minC = min(C.r, min(C.g, C.b));\n    float maxC = max(C.r, max(C.g, C.b));\n    float satC = maxC - minC;\n    if (satC < .01 || satS < .01)\n        return false;\n    vec3 S = (selectionColor - minS) / satS;\n    vec3 H = (C - minC) / satC;\n    vec3 D = H - S;\n    float eps = .15;\n    return (abs(D.r) + abs(D.g) + abs(D.b) < eps)\n        || (maxC >= (1.0 - eps) && D.r >= -eps && D.g >= -eps && D.b >= -eps);\n}\n#define IS_SELECTION(C) isSelected((C).rgb)\n#endif\nvec4 overlayEdgeDetect(vec2 vUv) {\n#ifdef IS_2D\n#define MAX_ALPHA(c)\n#define SUM_ALPHA(c, w) sumAlpha += c.a * w; sumWeight += w;\n#else\n#define MAX_ALPHA(c) maxAlpha = max(maxAlpha, c.a);\n#define SUM_ALPHA(c, w) \n#endif\n#ifdef USE_IDBUFFER_SELECTION\n#define CHECK_EDGE_ALPHA(I, J, W)     { vec4 c = texture2D( tOverlay, vUv+resolution*vec2((I),(J)) ); MAX_ALPHA(c) if (c.a > 0.0 && isSelection(vUv, I, J)) { hasEdge++; SUM_ALPHA(c, W) selectionPixel = c; } }\n#else\n#define CHECK_EDGE_ALPHA(I, J, W)     { vec4 c = texture2D( tOverlay, vUv+resolution*vec2((I),(J)) ); MAX_ALPHA(c) if (c.a > 0.0 && IS_SELECTION(c)) { hasEdge++; SUM_ALPHA(c, W) selectionPixel = c; } }\n#endif\n#ifndef IS_2D\n#define CHECK_EDGE_SELECTION(I, J) { vec4 c = texture2D( tOverlay, vUv+resolution*vec2((I),(J)) ); MAX_ALPHA(c) if (c.a <= 0.0) hasEdge++; }\n#endif\n    int hasEdge = 0;\n    vec4 center = texture2D(tOverlay, vUv);\n    vec4 selectionPixel = vec4(0.0);\n#ifdef IS_2D\n    float sumAlpha = 0.0, sumWeight = 0.0;\n#else\n    float maxAlpha = 0.0;\n    bool paintOutline = false;\n#endif\n    if (center.a <= 0.0) {\n        CHECK_EDGE_ALPHA(-1.0,-1.0, 1.0);\n        CHECK_EDGE_ALPHA( 0.0,-1.0, 2.0);\n        CHECK_EDGE_ALPHA( 1.0,-1.0, 1.0);\n        CHECK_EDGE_ALPHA(-1.0, 0.0, 2.0);\n        CHECK_EDGE_ALPHA( 1.0, 0.0, 2.0);\n        CHECK_EDGE_ALPHA(-1.0, 1.0, 1.0);\n        CHECK_EDGE_ALPHA( 0.0, 1.0, 2.0);\n        CHECK_EDGE_ALPHA( 1.0, 1.0, 1.0);\n        if (hasEdge != 0) {\n#ifdef IS_2D\n            center.a = -clamp(expand2dSelection - 1.0 + sumAlpha / sumWeight, 0.0, 1.0);\n            center.rgb = center.a < 0.0 ? selectionPixel.rgb : center.rgb;\n#else\n            center = selectionPixel;\n            paintOutline = true;\n#endif\n        }\n    }\n#ifdef USE_IDBUFFER_SELECTION\n    else if (center.a > 0.0 && isSelection(vUv, 0.0, 0.0)) {\n#else\n    else if (center.a > 0.0 && IS_SELECTION(center)) {\n#endif\n#ifdef IS_2D\n        center.a = -clamp(center.a + expand2dSelection, 0.0, 1.0);\n#else\n        CHECK_EDGE_SELECTION(-1.0,-1.0);\n        CHECK_EDGE_SELECTION( 0.0,-1.0);\n        CHECK_EDGE_SELECTION( 1.0,-1.0);\n        CHECK_EDGE_SELECTION(-1.0, 0.0);\n        CHECK_EDGE_SELECTION( 1.0, 0.0);\n        CHECK_EDGE_SELECTION(-1.0, 1.0);\n        CHECK_EDGE_SELECTION( 0.0, 1.0);\n        CHECK_EDGE_SELECTION( 1.0, 1.0);\n        if (hasEdge != 0)\n            paintOutline = true;\n        else\n            center.a = -center.a;\n#endif\n    }\n#ifndef IS_2D\n    if (paintOutline) {\n        float maxComponent = max(center.r, max(center.g, center.b));\n        center.rgb /= maxComponent;\n        center.rgb = sqrt(center.rgb);\n        center.a = 0.5 + 0.5 * maxAlpha * 0.125 * float(hasEdge);\n    }\n#endif\n    return center;\n}\n#ifdef SPATIAL_FILTER\nSPATIAL_FILTER\n#endif\nvec4 sampleColor() {\n    return texture2D( tDiffuse, vUv );\n}\nfloat sampleAO() {\n    return (useAO != 0) ? sqrt(texture2D(tAO, vUv).r) : 1.0;\n}\nvec3 applyCrossFade(vec3 srcColor, sampler2D fadeTex, float opacity, vec2 vUv) {\n    vec4 blendCol = texture2D(fadeTex, vUv);\n    return mix(srcColor.rgb, blendCol.rgb, blendCol.a * opacity);\n}\nvoid applyHighlighting(inout vec3 rgb, float filterValue) {\n#ifdef IS_2D\n    rgb = mix(rgb, vec3(1.0,1.0,0.0), filterValue * highlightIntensity * 0.25);\n#else\n    rgb += highlightColor * filterValue * highlightIntensity * 0.20;\n#endif\n}\n#ifdef USE_MODEL_ID\nfloat getModelIdDelta(vec2 a, vec2 b) {\n    vec2 delta = abs(a-b);\n    return max(delta.r, delta.g);\n}\nfloat getModelIdDelta(vec2 modelAtPixel) {\n    \n#ifdef HIGHLIGHT_MODEL_ID_COUNT\n    float delta = 1.0;\n    for (int i=0; i<HIGHLIGHT_MODEL_ID_COUNT; i++) {\n        delta = min(delta, getModelIdDelta(modelAtPixel, modelIDsv2v[i]));\n    }\n    return delta;\n#else\n    return getModelIdDelta(modelAtPixel, modelIDv2.rg);\n#endif\n}\n#endif\nvoid main() {\n    vec4 texel = sampleColor();\n    float ao = sampleAO();\n    #ifdef NUM_CROSSFADE_TARGETS\n        #if (NUM_CROSSFADE_TARGETS > 1)\n            #if (TARGET_FADE_MODE == 0)\n                texel.rgb = applyCrossFade(texel.rgb, tCrossFadeTex0, crossFadeOpacity0, vUv);\n                texel.rgb = applyCrossFade(texel.rgb, tCrossFadeTex1, crossFadeOpacity1, vUv);\n            #else\n                vec4 t0 = texture2D(tCrossFadeTex0, vUv);\n                vec4 t1 = texture2D(tCrossFadeTex1, vUv);\n                vec4 mixed = mix(t0, t1, crossFadeOpacity1);\n                texel.rgb = mix(texel.rgb, mixed.rgb, mixed.a);\n                float aoGamma = 1.0 + 3.0 * (1.0 - 2.0 * abs(crossFadeOpacity1 - 0.5));\n                if (aoGamma == 0.0)\n                    aoGamma = 1.0;\n                ao = pow(ao, 1.0 / aoGamma);\n            #endif\n        #else\n            vec4 mixed = texture2D(tCrossFadeTex0, vUv);\n            texel.rgb = mix(texel.rgb, mixed.rgb, mixed.a);\n        #endif\n    #else\n    #endif\n    ao = 1.0 - (1.0 - ao) * aoOpacity;\n    texel.rgb *= ao;\n    if (useOverlay != 0) {\n        vec4 overlay = overlayEdgeDetect(vUv);\n        if (overlay.a < 0.0) {\n            overlay.a = -overlay.a;\n#ifdef IS_2D\n            overlay.a *= 0.6;\n#else\n            if (overlay.a >= 0.99) {\n                overlay.a = 0.75;\n                texel.rgb = vec3(luminance_post(texel.rgb));\n            }\n#endif\n        }\n#ifdef IS_2D\n        texel.rgb = texel.rgb * (1.0 - overlay.a) + overlay.rgb;\n#else\n        texel.rgb = texel.rgb * (1.0 - overlay.a) + sqrt(overlay.rgb * overlay.a);\n#endif\n        if (useOverlayAlpha != 0) {\n            texel.a += overlay.a * (1.0 - texel.a);\n        }\n    }\n    if (objIDv4 != vec4(0.0)) {\n    vec4 idAtPixel = texture2D(tID, vUv);\n    #ifdef SPATIAL_FILTER\n        vec3 worldPos = reconstructWorldPosition(gl_FragCoord.xy, vUv);\n        float filterValue = (spatialFilter(worldPos) ? 1.0 : 0.0);\n        if (idAtPixel != vec4(1,1,1,1)) {\n            applyHighlighting(texel.rgb, filterValue);\n        }\n    #else\n        #if defined(USE_MODEL_ID)\n            vec4 modelAtPixel = texture2D(tID2, vUv);\n            idAtPixel.a = modelAtPixel.b;\n            vec4 idDelta = abs(idAtPixel.rgba - objIDv4.rgba) * (1.0 - highlightFullModel);\n            float modelDelta = getModelIdDelta(modelAtPixel.rg);\n        #else\n            vec4 idDelta = vec4(abs(idAtPixel.rgb - objIDv4.rgb), 0.0);\n            float modelDelta = 0.0;\n        #endif\n            if (max(modelDelta, max(max(idDelta.r, idDelta.g), max(idDelta.b, idDelta.a))) < 1e-3) {\n                applyHighlighting(texel.rgb, 1.0);\n            }\n    #endif\n    }\n    gl_FragColor = texel;\n}\n";