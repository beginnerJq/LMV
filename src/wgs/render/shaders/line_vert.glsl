module.exports = "\r\n\r\n#include <line_decl_common>\r\n\r\nattribute vec2 fields1;\r\nattribute vec4 fields2;\r\nattribute vec4 flags4b;\r\nattribute vec4 layerVp4b;\r\n\r\n#ifdef HAS_ELLIPTICALS\r\nattribute vec3 extraParams;\r\n#endif\r\n\r\n#ifdef USE_INSTANCING\r\nattribute vec4 instFlags4b;\r\n#endif\r\n\r\n#ifdef MSDF_TEXTURE_FONT\r\nvarying highp vec2 vuv;\r\nvarying float isMSDFQuards;\r\n#endif\r\n\r\n#ifdef IMAGE_UV_TEXTURE\r\nvarying highp vec2 vuv;\r\n#endif\r\n\r\n#ifdef VIEWPORT_CLIPPING\r\nvarying vec2 vPosition;\r\n#endif\r\n\r\nuniform mat4 mvpMatrix;\r\n\r\nuniform float pixelsPerUnit;\r\nuniform float aaRange;\r\nuniform float viewportId;\r\nuniform float swap;\r\n\r\n\r\n\r\n\r\n\r\n#ifdef HAS_LAYERS\r\nuniform sampler2D tLayerMask;\r\n#endif\r\n\r\n#ifdef SELECTION_RENDERER\r\nuniform sampler2D tSelectionTexture;\r\nuniform vec2 vSelTexSize;\r\n#endif\r\n\r\n#ifdef SELECTION_RENDERER\r\nuniform vec4 selectionColor;\r\n#endif\r\n\r\n#ifdef LOADING_ANIMATION\r\nuniform float meshAnimTime;\r\n#endif\r\n\r\n#if NUM_CUTPLANES > 0\r\nvarying vec3 vWorldPosition;\r\n#endif\r\n\r\nvarying vec4 dbId;\r\n\r\n#ifdef UNPACK_POSITIONS\r\nuniform sampler2D tIdColor;\r\nuniform vec2 vIdColorTexSize;\r\nuniform vec4 unpackXform;\r\nattribute vec2 uvIdColor;\r\nfloat unpackLineWeight(float w) {\r\n    if (w > 0.5) {\r\n        return - (w - 0.5) * 1024.0;\r\n    } else {\r\n        return w * max(unpackXform.x, unpackXform.y) * 2.0;\r\n    }\r\n}\r\nvec4 getVertexColor() {\r\n    float u = (uvIdColor.x + 0.5) / vIdColorTexSize.x;\r\n    return texture2D(tIdColor, vec2(u, 0.5));\r\n}\r\nvec4 getDbId() {\r\n    float u = (uvIdColor.y + 0.5) / vIdColorTexSize.x;\r\n    vec4 normDbId = texture2D(tIdColor, vec2(u, 0.5));\r\n    return normDbId * 255.0;\r\n}\r\n#else\r\nattribute vec4 color4b;\r\nattribute vec4 dbId4b;\r\nvec4 unpackXform;\r\nfloat unpackLineWeight(float w) {\r\n    return w;\r\n}\r\nvec4 getVertexColor() {\r\n    return color4b;\r\n}\r\nvec4 getDbId() {\r\n    return dbId4b;\r\n}\r\n#endif\r\n\r\n\r\nvec2 centralVertex;\r\nvec2 offsetPosition;\r\n\r\nvec2 cos_sin(const float angle) { return vec2(cos(angle), sin(angle)); }\r\n\r\nvoid min_max(inout vec2 minPt, inout vec2 maxPt, const vec2 p) {\r\n    minPt = min(minPt, p);\r\n    maxPt = max(maxPt, p);\r\n}\r\n\r\n#if defined(USE_INSTANCING)\r\nfloat getVertexId() { return instFlags4b.x; }\r\n#else\r\nfloat getVertexId() { return flags4b.x; }\r\n#endif\r\n\r\nbool isStartVertex() { return (getVertexId() < VBB_SEG_END_RIGHT); }\r\nbool isLeftVertex()  { float id = getVertexId(); return ((id == VBB_SEG_END_LEFT || id == VBB_SEG_START_LEFT)); }\r\n\r\nstruct SegmentData { float angle, distAlong, distTotal, lineWidthHalf, lineType; };\r\nvoid decodeSegmentData(out SegmentData seg) {\r\n    seg.angle         = fields2.x * TAU - PI;\r\n    seg.distAlong     = fields2.y * max(unpackXform.x, unpackXform.y);\r\n    seg.distTotal     = fields2.w;\r\n    seg.lineWidthHalf = unpackLineWeight(fields2.z);\r\n    seg.lineType      = flags4b.z;\r\n}\r\n\r\nvoid strokeLineSegment() {\r\n    SegmentData seg; decodeSegmentData(seg);\r\n\r\n    float isStartCapVertex = isStartVertex() ? -1.0 :  1.0;\r\n    float isLeftSide       = isLeftVertex( ) ?  1.0 : -1.0;\r\n\r\n\r\n    float angleTransverse = seg.angle + isLeftSide * HALF_PI;\r\n    float lwAdjustment = fsHalfWidth + aaRange;\r\n    vec2 transverseOffset = cos_sin(angleTransverse) * lwAdjustment;\r\n    offsetPosition.xy += transverseOffset;\r\n\r\n\r\n\r\n\r\n    float distanceFromStart = max(isStartCapVertex, 0.0) * seg.distAlong;\r\n    vec2 along = distanceFromStart * cos_sin(seg.angle);\r\n    offsetPosition.xy += along;\r\n    centralVertex.xy  += along;\r\n\r\n\r\n    vec2 moveOffset = isStartCapVertex * isLeftSide * vec2(-transverseOffset.y, transverseOffset.x);\r\n    offsetPosition.xy -= moveOffset;\r\n    centralVertex.xy  -= moveOffset;\r\n\r\n\r\n\r\n\r\n    fsMultipurpose.x = (isStartCapVertex * lwAdjustment) + distanceFromStart;\r\n    fsMultipurpose.y = seg.distAlong;\r\n    fsMultipurpose.z = seg.distTotal;\r\n    fsMultipurpose.w = seg.lineType;\r\n\r\n    if (seg.lineWidthHalf < 0.0)\r\n        fsHalfWidth = -fsHalfWidth;\r\n}\r\n\r\n\r\n#ifdef HAS_TRIANGLE_GEOMS\r\nstruct TriangleData { vec2 p0, p1, p2; };\r\nvoid decodeTriangleData(out TriangleData tri) {\r\n\r\n    tri.p1 = vec2(fields2.x, fields2.y) * unpackXform.xy + unpackXform.zw;\r\n    tri.p2 = fields2.zw * unpackXform.xy + unpackXform.zw;\r\n}\r\n\r\nvoid strokeOneTriangle() {\r\n    TriangleData tri; decodeTriangleData(tri);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    fsHalfWidth = 0.0;\r\n    fsMultipurpose.z = 0.0;\r\n\r\n\r\n\r\n\r\n\r\n    float vertexId = getVertexId();\r\n    if (vertexId == VBB_SEG_END_RIGHT)\r\n        offsetPosition.xy = tri.p1;\r\n    else if (vertexId == VBB_SEG_END_LEFT)\r\n        offsetPosition.xy = tri.p2;\r\n}\r\n#endif\r\n\r\n\r\n\r\n\r\n#ifdef HAS_RASTER_QUADS\r\nstruct TexQuadData { float angle; vec2 size; };\r\nvoid decodeTexQuadData(out TexQuadData quad) {\r\n    quad.angle     = fields2.x * TAU;\r\n    quad.size   = fields2.yz * max(unpackXform.x, unpackXform.y);\r\n}\r\n\r\nvoid strokeTexQuad() {\r\n    TexQuadData quad; decodeTexQuadData(quad);\r\n\r\n    vec2 corner = vec2(isLeftVertex() ? -1.0 : 1.0, isStartVertex() ? -1.0 : 1.0);\r\n\r\n    vec2 p      = 0.5 * corner * quad.size;\r\n    vec2 rot    = cos_sin(quad.angle);\r\n    vec2 offset = vec2(p.x * rot.x - p.y * rot.y, p.x * rot.y + p.y * rot.x);\r\n\r\n    offsetPosition.xy += offset;\r\n\r\n    fsMultipurpose.xy = max(vec2(0.0), corner);\r\n\r\n\r\n    fsMultipurpose.z = 1.0;\r\n    fsHalfWidth = 0.0;\r\n}\r\n#endif\r\n\r\n#if defined(HAS_CIRCLES) || defined(HAS_ELLIPTICALS)\r\nstruct ArcData { vec2 c; float start, end, major, minor, tilt; };\r\nvoid decodeArcData(out ArcData arc) {\r\n    arc.c     = fields1.xy * unpackXform.xy + unpackXform.zw;\r\n    arc.start = fields2.x * TAU;\r\n    arc.end   = fields2.y * TAU;\r\n    arc.major = fields2.w * max(unpackXform.x, unpackXform.y);\r\n#if defined(HAS_ELLIPTICALS)\r\n    arc.minor = extraParams.x;\r\n    arc.tilt  = extraParams.y * TAU;\r\n#endif\r\n}\r\n\r\nvoid strokeArc(const ArcData arc) {\r\n\r\n\r\n    float isStart = isStartVertex() ? -1.0 : 1.0;\r\n    float isLeft  = isLeftVertex()  ? -1.0 : 1.0;\r\n\r\n\r\n\r\n\r\n    vec2 minPt;\r\n    vec2 maxPt;\r\n\r\n    vec2 angles = vec2(arc.start, arc.end);\r\n    vec2 endsX = vec2(arc.c.x) + arc.major * cos(angles);\r\n    vec2 endsY = vec2(arc.c.y) + arc.minor * sin(angles);\r\n    minPt = maxPt = vec2(endsX.x, endsY.x);\r\n    min_max(minPt, maxPt, vec2(endsX.y, endsY.y));\r\n\r\n    if (arc.end > arc.start) {\r\n        if (arc.start < PI_0_5 && arc.end > PI_0_5) {\r\n            min_max(minPt, maxPt, vec2(arc.c.x, arc.c.y + arc.minor));\r\n        }\r\n        if (arc.start < PI && arc.end > PI) {\r\n            min_max(minPt, maxPt, vec2(arc.c.x - arc.major, arc.c.y));\r\n        }\r\n        if (arc.start < PI_1_5 && arc.end > PI_1_5) {\r\n            min_max(minPt, maxPt, vec2(arc.c.x, arc.c.y - arc.minor));\r\n        }\r\n    } else {\r\n\r\n        min_max(minPt, maxPt, vec2(arc.c.x + arc.major, arc.c.y));\r\n\r\n\r\n\r\n        if (arc.start < PI_0_5 || arc.end > PI_0_5) {\r\n            min_max(minPt, maxPt, vec2(arc.c.x, arc.c.y + arc.minor));\r\n        }\r\n        if (arc.start < PI || arc.end > PI) {\r\n            min_max(minPt, maxPt, vec2(arc.c.x - arc.major, arc.c.y));\r\n        }\r\n        if (arc.start < PI_1_5 || arc.end > PI_1_5) {\r\n            min_max(minPt, maxPt, vec2(arc.c.x, arc.c.y - arc.minor));\r\n        }\r\n    }\r\n\r\n    minPt -= fsHalfWidth + aaRange;\r\n    maxPt += fsHalfWidth + aaRange;\r\n\r\n    offsetPosition.x = (isStart < 0.0) ? minPt.x : maxPt.x;\r\n    offsetPosition.y = (isLeft < 0.0)  ? minPt.y : maxPt.y;\r\n\r\n\r\n\r\n\r\n\r\n    fsMultipurpose.x = arc.start;\r\n    fsMultipurpose.y = -arc.major;\r\n    fsMultipurpose.z = arc.end;\r\n    fsMultipurpose.w = arc.minor;\r\n}\r\n#endif\r\n\r\n#if defined(HAS_CIRCLES)\r\n\r\nvoid strokeCircularArc() {\r\n    ArcData arc; decodeArcData(arc);\r\n\r\n    float r = arc.major;\r\n    if (r * pixelsPerUnit < 0.125)\r\n        r = 0.25 * aaRange;\r\n    arc.major = arc.minor = r;\r\n\r\n    strokeArc(arc);\r\n}\r\n\r\n#endif\r\n\r\n#if defined(HAS_ELLIPTICALS)\r\nvoid strokeEllipticalArc() {\r\n    ArcData arc; decodeArcData(arc);\r\n    strokeArc(arc);\r\n}\r\n#endif\r\n\r\nstruct CommonAttribs { vec2 pos; vec4 color; vec2 layerTC, vpTC; float lineWidthHalf, geomType, ghosting; };\r\nvoid decodeCommonAttribs(out CommonAttribs attribs) {\r\n    attribs.pos           = fields1.xy * unpackXform.xy + unpackXform.zw;\r\n    attribs.color         = getVertexColor();\r\n    attribs.geomType      = flags4b.y;\r\n    attribs.layerTC       = layerVp4b.xy / 255.0;\r\n    attribs.vpTC          = layerVp4b.zw / 255.0;\r\n    attribs.lineWidthHalf = unpackLineWeight(fields2.z);\r\n    attribs.ghosting      = flags4b.w;\r\n}\r\n\r\nvoid strokeIndexedTriangle() {\r\n\r\n    fsHalfWidth = 0.0;\r\n    fsMultipurpose.z = 0.0;\r\n}\r\n\r\n#ifdef SELECTION_RENDERER\r\nbool isSelected(const CommonAttribs attribs) {\r\n\r\n\r\n    vec3 oid = getDbId().rgb;\r\n\r\n\r\n    float id01 = oid.r + oid.g * 256.0;\r\n    float t = (id01 + 0.5) * (1.0 / 4096.0);\r\n    float flrt = floor(t);\r\n    float texU = t - flrt;\r\n\r\n\r\n    float id23 = oid.b * (65536.0 / 4096.0) + flrt;\r\n    t = (id23 + 0.5) / vSelTexSize.y;\r\n    float texV = fract(t);\r\n\r\n    vec4 selBit = texture2D(tSelectionTexture, vec2(texU, texV));\r\n    return selBit.r == 1.0;\r\n}\r\n#endif\r\n\r\nbool isLayerOff(const CommonAttribs attribs) {\r\n#ifdef HAS_LAYERS\r\n    vec4 layerBit = texture2D(tLayerMask, attribs.layerTC);\r\n    return (layerBit.r == 0.0);\r\n#else\r\n    return false;\r\n#endif\r\n}\r\n\r\nvec4 getColor(const CommonAttribs attribs) {\r\n\r\n    if (isLayerOff(attribs)) { return vec4(0.0); }\r\n\r\n#ifdef SELECTION_RENDERER\r\n    if (isSelected(attribs)) { return selectionColor; }\r\n    return vec4(0.0);\r\n#else\r\n    return attribs.color;\r\n#endif\r\n}\r\n\r\n#ifdef GAMMA_INPUT\r\nvec4 inputToLinear(vec4 c) {\r\n    return vec4(vec3(c*c), c.a);\r\n}\r\n#endif\r\n\r\nvoid main() {\r\n#ifndef UNPACK_POSITIONS\r\n    unpackXform = vec4(1.0, 1.0, 0.0, 0.0);\r\n#endif\r\n\r\n    CommonAttribs attribs; decodeCommonAttribs(attribs);\r\n#ifdef MSDF_TEXTURE_FONT\r\n    vuv = fields2.xy;\r\n    isMSDFQuards = 1.0 - abs(sign(attribs.geomType - VBB_GT_MSDF_TRIANGLE_INDEXED));\r\n#endif\r\n\r\n#ifdef IMAGE_UV_TEXTURE\r\n    vuv = fields2.xy;\r\n#endif\r\n\r\n    fsColor = getColor(attribs);\r\n\r\n    #ifdef GAMMA_INPUT\r\n    fsColor = inputToLinear(fsColor);\r\n    #endif\r\n\r\n\r\n    if (swap != 0.0 ) {\r\n\r\n        if ( fsColor.r == 0.0 && fsColor.g == 0.0 && fsColor.b == 0.0 )\r\n            fsColor.rgb = vec3(1.0,1.0,1.0);\r\n\r\n        else if ( fsColor.r == 1.0 && fsColor.g == 1.0 && fsColor.b == 1.0 )\r\n            fsColor.rgb = vec3(0.0,0.0,0.0);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    centralVertex = offsetPosition = attribs.pos;\r\n\r\n    float lineWeight = attribs.lineWidthHalf;\r\n    if (lineWeight > 0.0) {\r\n\r\n\r\n        if(lineWeight < 0.5 / pixelsPerUnit) {\r\n            lineWeight = 0.5 / pixelsPerUnit;\r\n        }\r\n    }\r\n    else {\r\n\r\n\r\n        lineWeight = abs(lineWeight) / pixelsPerUnit;\r\n    }\r\n\r\n    fsHalfWidth = lineWeight;\r\n\r\n    dbId = getDbId() / 255.0;\r\n\r\n    fsVpTC     = attribs.vpTC;\r\n    fsGhosting = attribs.ghosting;\r\n\r\n    if      (attribs.geomType == VBB_GT_LINE_SEGMENT || attribs.geomType == VBB_GT_LINE_SEGMENT_CAPPED || attribs.geomType == VBB_GT_LINE_SEGMENT_CAPPED_START || attribs.geomType == VBB_GT_LINE_SEGMENT_CAPPED_END)     strokeLineSegment();\n#ifdef HAS_CIRCLES\r\n    else if (attribs.geomType == VBB_GT_ARC_CIRCULAR)     strokeCircularArc();\r\n#endif\r\n#ifdef HAS_ELLIPTICALS\r\n    else if (attribs.geomType == VBB_GT_ARC_ELLIPTICAL)   strokeEllipticalArc();\r\n#endif\r\n#ifdef HAS_RASTER_QUADS\r\n    else if (attribs.geomType == VBB_GT_TEX_QUAD)         strokeTexQuad();\r\n#endif\r\n#ifdef HAS_TRIANGLE_GEOMS\r\n    else if (attribs.geomType == VBB_GT_ONE_TRIANGLE)     strokeOneTriangle();\r\n#endif\r\n    else if (attribs.geomType == VBB_GT_TRIANGLE_INDEXED) strokeIndexedTriangle();\r\n\r\n\r\n\r\n    fsOffsetDirection = offsetPosition - centralVertex;\r\n\r\n\r\n    gl_Position = mvpMatrix * modelMatrix * vec4( offsetPosition.xy, 0.0, 1.0 );\r\n\r\n#ifdef LOADING_ANIMATION\r\n\r\n    if (dbId.rgb == vec3(1.0)) {\r\n        loadingProgress = 1.0;\r\n    } else {\r\n        loadingProgress = smoothstep(0.0, 1.0, meshAnimTime);\r\n    }\r\n#endif\r\n\r\n#ifdef IMAGE_UV_TEXTURE\r\n    fsHalfWidth = 0.0;\r\n#endif\r\n\r\n\r\n#if NUM_CUTPLANES > 0\r\n    vec4 worldPosition = modelMatrix * vec4( offsetPosition.xy, 0.0, 1.0 );\r\n    vWorldPosition = worldPosition.xyz;\r\n#endif\r\n\r\n#ifdef VIEWPORT_CLIPPING\r\n    vPosition = offsetPosition.xy;\r\n#endif\r\n}\r\n";