module.exports = "\n#define LINE_SS\n#include <line_decl_common>\n#include <id_decl_frag>\nuniform highp float aaRange;\nuniform float opacity;\nuniform highp float viewportId;\nuniform highp float swap;\nuniform highp float grayscale;\n#ifdef HAS_LINESTYLES\nuniform sampler2D tLineStyle;\nuniform vec2 vLineStyleTexSize;\nvarying highp float vPixelsPerUnit;\n#endif\n#ifdef VIEWPORT_CLIPPING\nuniform highp vec4 viewportBounds;\nvarying highp vec2 vPosition;\nuniform mat4 mvpMatrix;\nuniform mat4 modelMatrix;\n#endif\nfloat curveGaussian(float r, float width) {\n    float amt = clamp(abs(r / (width * 1.0)), 0.0, 1.0);\n    amt = max(amt - 0.0, 0.0);\n    float exponent = amt * 2.0;\n    return clamp(exp(-exponent*exponent), 0.0, 1.0);\n}\n#ifdef HAS_LINESTYLES\nfloat getLinePatternPixel(int i, int j) {\n    return texture2D(tLineStyle, (vec2(i, j) + 0.5) / vLineStyleTexSize).x * 255.0;\n}\nfloat getPatternLength(int whichPattern) {\n    float p1 = getLinePatternPixel(0, whichPattern);\n    float p2 = getLinePatternPixel(1, whichPattern);\n    return (p2 * 256.0 + p1);\n}\n#endif\nvoid fillLineSegment() {\n    float radius = abs(fsHalfWidth);\n    float parametricDistance = fsMultipurpose.x;\n    float segmentLength      = fsMultipurpose.y;\n    float totalDistance      = fsMultipurpose.z;\n#ifdef LOADING_ANIMATION\n    float distFromStart = parametricDistance / segmentLength;\n    if (loadingProgress < 1.0 && distFromStart > loadingProgress) {\n        discard;\n    }\n#endif\n#ifdef HAS_LINESTYLES\n    int whichPattern         = int(fsMultipurpose.w);\n    if (whichPattern > 0) {\n        const float TEX_TO_UNIT = 1.0 / 96.0;\n        float patternScale;\n        if (fsHalfWidth < 0.0) {\n            patternScale = LTSCALE;\n        } else {\n            patternScale = LTSCALE * TEX_TO_UNIT * vPixelsPerUnit;\n        }\n        float patLen = patternScale * getPatternLength(whichPattern);\n        float phase = mod((totalDistance + parametricDistance), patLen);\n        bool onPixel = true;\n        float radiusPixels = radius + aaRange;\n        for (int i=2; i<MAX_LINESTYLE_LENGTH; i+=2) {\n            float on = getLinePatternPixel(i, whichPattern);\n            if (on == 1.0) on = 0.0;\n            on *= patternScale;\n            onPixel = true;\n            phase -= on;\n            if (phase < 0.0) {\n                break;\n            }\n            else if (phase <= radiusPixels) {\n                onPixel = false;\n                break;\n            }\n            float off = getLinePatternPixel(i+1, whichPattern);\n            if (off <= 1.0) off = 0.0;\n            off *= patternScale;\n            onPixel = false;\n            phase -= off;\n            if (phase < -radiusPixels)\n                discard;\n            if (phase <= 0.0)\n                break;\n        }\n        if (!onPixel && (abs(phase) <= radiusPixels)) {\n            segmentLength = 0.0;\n            parametricDistance = phase;\n        }\n    }\n#endif\n    float dist;\n    float offsetLength2 = dot(fsOffsetDirection, fsOffsetDirection);\n    float ltz = max(0.0, sign(-parametricDistance));\n    float gtsl = max(0.0, sign(parametricDistance - segmentLength));\n    float d = (ltz + gtsl) * (parametricDistance - gtsl * segmentLength);\n    dist = sqrt(max(0.0, offsetLength2 + d*d));\n    float range =  dist - radius;\n    if (range > aaRange) {\n        discard;\n    }\n    gl_FragColor = fsColor;\n    if (range > -aaRange)\n        gl_FragColor.a *= curveGaussian(range+aaRange, aaRange * 2.0);\n}\n#ifdef LOADING_ANIMATION\n    void fillTriangle() { gl_FragColor = vec4(fsColor.rgb, fsColor.a * loadingProgress); }\n#else\n    void fillTriangle() { gl_FragColor = fsColor; }\n#endif\n#if NUM_CUTPLANES > 0\nvarying highp vec3 vWorldPosition;\n#endif\n#include <cutplanes>\nfloat getSide(vec2 a, vec2 b, vec2 c) {\n    return sign((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x));\n}\nvoid main() {\n    if (fsColor == vec4(0.0)) {\n        discard;\n    }\n#ifdef VIEWPORT_CLIPPING\n    vec2 bottomLeft = (mvpMatrix * modelMatrix * vec4(viewportBounds.xy, 0., 1.)).xy;\n    vec2 bottomRight = (mvpMatrix * modelMatrix * vec4(viewportBounds.zy, 0., 1.)).xy;\n    vec2 topRight = (mvpMatrix * modelMatrix * vec4(viewportBounds.zw, 0., 1.)).xy;\n    vec2 topLeft = (mvpMatrix * modelMatrix * vec4(viewportBounds.xw, 0., 1.)).xy;\n    float side = getSide(topLeft, topRight, bottomLeft);\n    if (side * getSide(topRight, bottomRight, vPosition) < 0.0 ||\n        side * getSide(bottomRight, bottomLeft, vPosition) < 0.0 ||\n        side * getSide(bottomLeft, topLeft, vPosition) < 0.0 ||\n        side * getSide(topLeft, topRight, vPosition) < 0.0) {\n        discard;\n    }\n#endif\n    if (fsHalfWidth == 0.0) {\n        fillTriangle();\n    }\n    else\n        fillLineSegment();\n    float writeId = 1.0;\n    gl_FragColor.a *= opacity;\n    if (gl_FragColor.a == 0.0) {\n        discard;\n    }\n    if (fsGhosting != 0.0 || \n            ((viewportId != 0.0) && (abs(fsVpTC.x * 255.0 + fsVpTC.y) >= 0.5 && abs(fsVpTC.x * 255.0 + fsVpTC.y - viewportId) >= 0.5))) {\n        writeId = 0.0;\n        gl_FragColor.a *= ((swap == 1.0) ? 0.21 : 0.1);\n    }\n#ifndef SELECTION_RENDERER\n    if (grayscale != 0.0) {\n        const vec3 rgb2grey = vec3(0.299, 0.587, 0.114);\n        float gray = dot(gl_FragColor.rgb, rgb2grey);\n        gl_FragColor.rgb = vec3(gray);\n    }\n#endif\n#if NUM_CUTPLANES > 0\n    checkCutPlanes(vWorldPosition);\n#endif\n#ifdef MRT_NORMALS\n    outNormal = vec4(0.0, 0.0, 0.0, 1.0);\n#endif\n#ifdef NO_ID_OUTPUT\n    writeId = 0.0;\n#endif\n#include <id_frag>\n}\n";