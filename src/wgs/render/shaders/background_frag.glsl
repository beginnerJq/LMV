module.exports = "varying vec3 vColor;\nvarying vec2 vUv;\nuniform samplerCube envMap;\nuniform vec3 uCamDir;\nuniform vec3 uCamUp;\nuniform vec2 uResolution;\nuniform float uHalfFovTan;\nuniform float opacity;\nuniform bool envMapBackground;\n#ifdef USE_BACKGROUND_TEXTURE\nuniform sampler2D backgroundTexture;\n#endif\n#include <env_sample>\nconst int bloomRange = 4;\n#include <ordered_dither>\nuniform float envMapExposure;\n#if TONEMAP_OUTPUT > 0\nuniform float exposureBias;\n#include <tonemap>\n#endif\nvec3 rayDir(in vec2 vUv) {\n    vec3 A = (uResolution.x/uResolution.y)*normalize(cross(uCamDir,uCamUp)) * (uHalfFovTan * 2.0);\n    vec3 B = normalize(uCamUp) * (uHalfFovTan * 2.0);\n    vec3 C = normalize(uCamDir);\n    vec3 ray = normalize( C + (2.0*vUv.x-1.0)*A + (2.0*vUv.y-1.0)*B );\n    return ray;\n}\nvec3 getColor(in vec3 rd) {\n    return RGBMDecode(textureCube(envMap, adjustLookupVector(rd)), envMapExposure);\n}\nvoid main() {\n    vec3 rd = rayDir(vUv);\n    vec3 outColor;\n    float alpha = opacity;\n#ifdef USE_BACKGROUND_TEXTURE\n    vec4 texel = texture2D(backgroundTexture, vUv);\n    outColor = texel.rgb;\n    alpha *= texel.a;\n#else\n    if (envMapBackground) {\n        outColor = getColor(rd);\n#if TONEMAP_OUTPUT == 1\n        outColor = toneMapCanonOGS_WithGamma_WithColorPerserving(exposureBias * outColor);\n#elif TONEMAP_OUTPUT == 2\n        outColor = toneMapCanonFilmic_WithGamma(exposureBias * outColor);\n#endif\n    }\n    else {\n        outColor = vColor;\n    }\n#endif\n    gl_FragColor = vec4(orderedDithering(outColor), alpha);\n}\n";