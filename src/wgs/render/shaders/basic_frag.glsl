module.exports = "uniform vec3 diffuse;\nuniform float opacity;\n#if defined(DEPTH_OCCLUSION) && DEPTH_OCCLUSION == 1\nuniform sampler2D tDepthTest;\nuniform vec2 tDepthResolution;\nvarying float vDepthPositionZ;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#if NUM_CUTPLANES > 0\nvarying highp vec3 vWorldPosition;\n#endif\n#if defined( PARTICLE_UV )\nvarying highp vec4 vUVp;\n#endif\n#include <cutplanes>\n#include <id_decl_frag>\n#include <theming_decl_frag>\nvoid main() {\n#if NUM_CUTPLANES > 0\n    checkCutPlanes(vWorldPosition);\n#endif\n    vec3 outgoingLight = vec3( 0.0 );\n    vec4 diffuseColor = vec4( diffuse, opacity );\n#if defined( USE_MAP ) && defined ( PARTICLE_FRAGMENT )\n    #if defined( PARTICLE_UV )\n        vec2 uv3 = mix( vUVp.xy, vUVp.zw, gl_PointCoord );\n        diffuseColor = texture2D( map, uv3);\n    #else\n    \tdiffuseColor = texture2D( map, gl_PointCoord );\n    #endif\n#else\n    #include <map_fragment>\n#endif\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <specularmap_fragment>\n    outgoingLight = diffuseColor.rgb;\n#if !defined ( PARTICLE_FRAGMENT )\n    #include <lightmap_fragment>\n    #include <envmap_fragment>\n#endif\n#include <linear_to_gamma_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    vec3 geomNormal = vec3(0.0,0.0,0.0);\n    float depth = 0.0;\n#include <theming_frag>\n#if defined(DEPTH_OCCLUSION) && DEPTH_OCCLUSION == 1\n    vec2 depthUV = gl_FragCoord.xy * tDepthResolution;\n    float depthVal = texture2D(tDepthTest, depthUV).z;\n    if(depthVal > vDepthPositionZ && depthVal != 0.) {\n        discard;\n    }\n#endif\n#include <final_frag>\n}\n";